@page "/appear/{examId:int}"

@using ExamManagementSystem.Data
@using ExamManagementSystem.Helpers;
@using ExamManagementSystem.Service
@using ExamManagementSystem
@using ExamManagementSystem.Pages.Component

@inject CommonService Service
@inject ExamService ExamService
@inject NavigationManager UriHelper
@inject AuthenticationStateProvider AuthProvider
@inject DialogService DialogService
@inject IJSRuntime JsRuntime

@if (Exam == null)
{
    <div class="rz-p-12 rz-text-align-center">
        <RadzenText Text="Loading..." />
    </div>
}
else
{
    <div class="container-fluid">
        <div class="row">
            @if (!Exam.IsAppearedByCurrentStudent)
            {
            <div class="col-md-12 border border-1 pt-2 text-center sticky-top bg-light">
                <Timer DurationInMinutes="@Exam.RelativeDuration" AutoSubmitCallback="SubmitExam"></Timer>
            </div>
            }
            <div class="col-md-12 border border-1 p-2 text-center">
                <h3>@Exam.ExamName [@Exam.ExamCode]</h3><br />
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
                    <RadzenText TextStyle="TextStyle.Subtitle2" Class="rz-m-0">Marks : <b>@Exam.Questions?.Sum(x => x.Marks)</b></RadzenText>
                    <RadzenText TextStyle="TextStyle.Subtitle2">Date: <b>@Exam.Date.ToString("dd/MM/yyyy")</b> at <b>@Exam.StartTime.ToString("h:mm tt")</b> </RadzenText>
                    <RadzenText TextStyle="TextStyle.Subtitle2">Duration: <b>@Exam.Duration Mins</b> </RadzenText>
                </RadzenStack>
            </div>
            @if (Exam.ExamStatus != Enums.EnumExamStatus.Started)
            {
                <div class="col-md-12 border border-1 p-2 mb-5 text-center">
                    <RadzenText TextStyle="TextStyle.Body1"><ExamStatus Exam="@Exam"></ExamStatus></RadzenText>
                </div>
            }
            else
            {
                if (Exam.IsAppearedByCurrentStudent)
                {
                    <div class="col-md-12 p-2 mb-5 text-center">
                        <RadzenText TextStyle="TextStyle.DisplayH3" class="text-success" Text="You submitted this exam already" />
                    </div>
                    <div class="col-md-12 p-2 mb-5 text-center">
                        <RadzenButton ButtonType="ButtonType.Button" Click=@(args => UriHelper.NavigateTo($"myexams")) Text="Back to my exams" />
                    </div>
                }
                else
                {
                    <div class="col-md-12 mt-5 border border-0 border-top border-bottom" style="max-height: 45vh; overflow-y: auto;">
                        @if (Exam.Questions != null)
                        { 
                            @foreach (var item in Exam.Questions)
                            {
                                var bindAnswer = Answers.First(x => x.QuestionId == item.Id);
                                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center" Style="border-bottom:1px solid grey">
                                    <RadzenText> <b>@(Exam.Questions.ToList().IndexOf(item) + 1).&nbsp; @(new MarkupString(@item.QuestionText))</b> </RadzenText>
                                    <RadzenText TextStyle="TextStyle.Subtitle2" Class="rz-m-0" Text="@(item.Marks +" Mark(s)")" />
                                </RadzenStack>
                                <RadzenRadioButtonList @bind-Value=bindAnswer.AnswerId TValue="int" Orientation=Orientation.Vertical class="mb-5">
                                    <Items>
                                        @foreach (var opt in item.Options)
                                        {
                                            <RadzenRadioButtonListItem Text="@opt.OptText" TValue="int" Value=@opt.Id />
                                        }
                                    </Items>
                                </RadzenRadioButtonList>
                            }
                        }
                    </div>
                    <div class="col-md-12 p-2 text-center">
                        <RadzenButton Text="Submit Exam" ButtonStyle="ButtonStyle.Primary" Click=@(args => ConfirmDialog()) />
                        <RadzenText TextStyle="TextStyle.Subtitle2" Text="@("Answered " + Answers.Count(x=>x.AnswerId > 0) + " Out of " +Answers.Count)" />
                    </div>
                }
            }
        </div>
    </div>
}
@code {
    [Parameter]
    public int examId { get; set; }

    Exam Exam;

    List<Answer> Answers = new List<Answer>();

    async Task ConfirmDialog()
    {
        bool? confirmed = await DialogService.Confirm("Are you sure to want to submit?", "Submit Exam",
                                                        new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No", CloseDialogOnOverlayClick = true });
        if (confirmed.GetValueOrDefault())
        {
            await SubmitExam();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        var userId = await AuthProvider.GetUserId();

        Exam = await ExamService.AppearExam(examId);
        foreach (var question in Exam.Questions)
        {
            Answers.Add(new Answer()
                {
                    QuestionId = question.Id,
                    Question = question,
                    StudentId = userId,
                    Exam = Exam,
                    ExamId = Exam.Id
                });
        }
    }

    private async Task SubmitExam()
    {
        await ExamService.SubmitExam(examId, Answers);
        UriHelper.NavigateTo("/");
    }
}
