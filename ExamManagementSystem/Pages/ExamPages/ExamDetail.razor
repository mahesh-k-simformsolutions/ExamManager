@page "/exam/{examId:int}"

@using ExamManagementSystem.Data
@using ExamManagementSystem.Service
@using ExamManagementSystem.Pages.Component
@using System.Security.Principal
@using Microsoft.AspNetCore.Identity;
@using ExamManagementSystem.Pages.QuestionPages;

@inject ExamService ExamService
@inject NavigationManager UriHelper
@inject AuthenticationStateProvider AuthProvider
@inject DataStore DataStore
@attribute [Authorize]

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12 border border-1 p-2 text-center">
            <h3>@Exam.ExamName [@Exam.ExamCode]</h3><br />
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
                <RadzenText TextStyle="TextStyle.Subtitle2" Class="rz-m-0">Marks : <b>@Exam.Questions?.Sum(x => x.Marks)</b></RadzenText>
                <RadzenText TextStyle="TextStyle.Subtitle2">Date: <b>@Exam.Date.ToString("dd/MM/yyyy")</b> at <b>@Exam.StartTime.ToString("h:mm tt")</b> </RadzenText>
                <RadzenText TextStyle="TextStyle.Subtitle2">Duration: <b>@Exam.Duration Mins</b> </RadzenText>
            </RadzenStack>
        </div>
        <div class="col-md-12 border border-1 pt-1 mb-5 text-center">
            <RadzenText TextStyle="TextStyle.Body1"><ExamStatus Exam="@Exam"></ExamStatus></RadzenText>
        </div>
        <AuthorizeView Policy="VerifiedTeacherOrAdmin">
            <div class="col-md-12 border border-1 p-2 mb-5 text-center">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
                    <RadzenText>Examiner: <b>@Exam.Teacher?.Name</b></RadzenText>
                    <RadzenText>Students appearing for this exam: <b>@Students.Count</b></RadzenText>
                </RadzenStack>
            </div>

            <RadzenText TextStyle="TextStyle.DisplayH6" Text="Students" />
            <div class="col-md-12 border border-1 p-2 mb-5">
                <Students Data="Students.Select(x => x.Student).OrderBy(x=>x.Name).ToList()"></Students>
            </div>

            <RadzenText TextStyle="TextStyle.DisplayH6" Text="Questions" />
            <div class="col-md-12 border border-1 p-2 mb-5">
                @if (Exam.Questions != null)
                {
                    <Questions Data="Exam.Questions" ShowActionButtons="false"></Questions>
                }
            </div>


            @if (Exam.ExamStatus == Enums.EnumExamStatus.NotStarted)
            {
                <div class="col-md-12 p-2 mb-5 text-center">
                    <RadzenButton ButtonType="ButtonType.Button" Click=@(args => UriHelper.NavigateTo($"editexam/{examId}")) Text="Edit"></RadzenButton>
                </div>
            }
        </AuthorizeView>
        <AuthorizeView Policy="VerifiedStudent">
            @if (Exam.ExamStatus == Enums.EnumExamStatus.Started)
            {
                <div class="col-md-12 p-2 mb-5 text-center">
                    <RadzenButton ButtonType="ButtonType.Button" Click=@(args => UriHelper.NavigateTo($"appear/{examId}")) Text="Start"></RadzenButton>
                </div>
            }
        </AuthorizeView>
    </div>
</div>
<PageTitle>@Exam?.ExamName</PageTitle>
@code {
    [Parameter]
    public int examId { get; set; }

    Exam Exam = new Exam();
    List<ExamToStudent> Students = new List<ExamToStudent>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Refresh();
        }
        catch (Exception ex)
        {
            throw;
        }
    }
    async Task Refresh()
    {
        Exam = await ExamService.GetExamById(examId);
        Students = await ExamService.GetExamsToStudentByExam(examId);
        //  examsGrid?.Reload();
    }
    public void Dispose()
    {
        DataStore.DataChanged -= Refresh;
    }
}
