@page "/exams"

<PageTitle>Exams</PageTitle>

@using ExamManagementSystem.Data
@using ExamManagementSystem.Helpers
@using System.Security.Claims;
@using ExamManagementSystem.Enums;
@using ExamManagementSystem.Pages.Component

@inject ExamManagementSystem.Service.ExamService ExamService
@inject NavigationManager UriHelper
@inject AuthenticationStateProvider AuthProvider
@inject DialogService DialogService

@attribute [Authorize(Roles = "Teacher,Admin")]
<h1>Exams</h1>
<br />
@if (exams == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add" Text="Conduct Exam" Style="margin-bottom:15px;" Click="@(args => UriHelper.NavigateTo("createexam"))" Size="ButtonSize.ExtraSmall"></RadzenButton>
    <RadzenDataGrid @ref="ordersGrid" AllowColumnResize="true" AllowColumnReorder="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" AllowPaging="true" PageSize="7" AllowSorting="true"
                Data="@exams" TItem="Exam">
        <Columns>
            <RadzenDataGridColumn Width="50px" TItem="Exam" Title="#" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                <Template Context="data">
                    @(exams.IndexOf(data) + 1)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Width="25%" TItem="Exam" Title="Exam name (Code)">
                <Template Context="data">
                    @{
                        var examName = $"{@data.ExamName} ({@data.ExamCode})"; var link = $"exam/{@data.Id}";
                    }
                    <RadzenText class="mb-0"> <RadzenLink Path="@link" Text="@examName" /></RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Width="10.5%" TItem="Exam" Title="Status">
                <Template Context="data">
                    <ExamStatus Exam="@data"></ExamStatus>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Width="10%" TItem="Exam" Title="Date">
                <Template Context="data">
                    <ExamDate Exam="@data"></ExamDate>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Width="9%" TItem="Exam" Title="Starts">
                <Template Context="data">
                    <RadzenText>
                        @data.StartTime.ToString("h:mm tt")
                    </RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Width="10%" TItem="Exam" Title="Duration">
                <Template Context="data">
                    <RadzenText>
                        @data.Duration Mins
                    </RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Exam" Title="Questions (Total Marks)">
                <Template Context="data">
                    <RadzenText>
                        @data.Questions.Count() (@data.Questions.Sum(x => x.Marks))
                    </RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Exam" Title="Examiner">
                <Template Context="data">
                    <RadzenText>
                        @data.Teacher!.Name
                    </RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Exam" Title="Action">
                <Template Context="data">
                    @if (IsEditable(data))
                    {
                        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Click=@(args => UriHelper.NavigateTo("editexam/" + @data.Id))
                              Text="Edit" Size="ButtonSize.ExtraSmall"></RadzenButton>
                        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Click=@(args => DeleteExam(@data.Id))
                              Text="Delete" Size="ButtonSize.ExtraSmall"></RadzenButton>
                    }
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    RadzenDataGrid<Exam> ordersGrid;
    private List<Exam> exams;
    private ClaimsPrincipal? User;
    protected override async Task OnInitializedAsync()
    {
        var authstate = await AuthProvider.GetAuthenticationStateAsync();
        User = authstate.User;
        await Refresh();
    }
    private bool IsEditable(Exam exam)
    {
        var currentId = User?.GetUserId();
        return (currentId == exam.TeacherId || User.IsInRole(EnumUserRole.Admin.ToString())) && exam.ExamStatus == EnumExamStatus.NotStarted;
    }
    private async Task DeleteExam(int id)
    {
        await ExamService.DeleteExam(id);
        await Refresh();
    }
    private async Task Refresh()
    {
        exams = await ExamService.GetExams();
    }

}
