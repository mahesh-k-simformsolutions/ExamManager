@page "/exams"

<PageTitle>Exams</PageTitle>

@using ExamManagementSystem.Data
@using ExamManagementSystem.Helpers
@using System.Security.Claims;
@using ExamManagementSystem.Enums;
@using ExamManagementSystem.Pages.Component

@inject ExamManagementSystem.Service.ExamService ExamService
@inject NavigationManager UriHelper
@inject AuthenticationStateProvider AuthProvider
@inject DialogService DialogService

@attribute [Authorize(Policy = "VerifiedTeacherOrAdmin")]

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
    <RadzenText TextStyle="TextStyle.DisplayH4" Text="Exams" />
    <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add" Text="Conduct Exam" Click="@(args => UriHelper.NavigateTo("createexam"))" Size="ButtonSize.ExtraSmall" />
</RadzenStack>
<RadzenDataGrid IsLoading="@(exams == null)" @ref="examsGrid" AllowColumnResize="true" AllowColumnReorder="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                AllowPaging="true" PageSize="8" AllowSorting="false" Data="@exams" TItem="Exam" ShowCellDataAsTooltip="true">
    <Columns>
        <RadzenDataGridColumn Width="4%" TItem="Exam" Title="#" Filterable="false" Sortable="false" Frozen="true">
            <Template Context="data">@(exams?.IndexOf(data) + 1)</Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Width="23%" TItem="Exam" Title="Exam name (Code)">
            <Template Context="data">
                <RadzenText><RadzenLink Path="@("exam/"+data.Id)" Text="@(data.ExamName + " (" + data.ExamCode + ")")" /></RadzenText>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Width="12%" TItem="Exam" Title="Status">
            <Template Context="data">
                <ExamStatus Exam="@data" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Width="11%" TItem="Exam" Title="Date">
            <Template Context="data">
                <ExamDate Exam="@data" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Width="10%" TItem="Exam" Title="Starts">
            <Template Context="data">
                <RadzenText Text="@data.StartTime.ToString("h:mm tt")" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Width="9%" TItem="Exam" Title="Duration">
            <Template Context="data">
                <RadzenText Text="@(data.Duration +" Mins")" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Width="6%" TItem="Exam" Title="Marks">
            <Template Context="data">
                <RadzenText Text="@data.Questions.Sum(x => x.Marks).ToString()" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Exam" Title="Examiner">
            <Template Context="data">
                <RadzenText Text="@data.Teacher!.Name" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Exam" Title="Action" Width="8%">
            <Template Context="data">
                @if (IsEditable(data))
                {
                    <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Click=@(args => UriHelper.NavigateTo("editexam/" + @data.Id))
                                  title="Edit" Size="ButtonSize.ExtraSmall" Icon="edit" Variant="Variant.Text" />
                    <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Click=@(args => DeleteExam(@data.Id))
                                  title="Delete" Size="ButtonSize.ExtraSmall" Icon="delete" Variant="Variant.Text" />
                }
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


@code {
    RadzenDataGrid<Exam>? examsGrid;
    private List<Exam> exams;
    private ClaimsPrincipal? User;
    protected override async Task OnInitializedAsync()
    {
        var authstate = await AuthProvider.GetAuthenticationStateAsync();
        User = authstate.User;
        await Refresh();
    }
    private bool IsEditable(Exam exam)
    {
        var currentId = User?.GetUserId();
        return (currentId == exam.TeacherId || User.IsInRole(EnumUserRole.Admin.ToString())) && exam.ExamStatus == EnumExamStatus.NotStarted;
    }
    private async Task DeleteExam(int id)
    {
        bool? confirmed = await DialogService.Confirm("Are you sure to want to delete?", "Delete Exam",
                                                        new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No", CloseDialogOnOverlayClick = true });
        if (confirmed.GetValueOrDefault())
        {
            await ExamService.DeleteExam(id);
            await Refresh();
        }
    }
    private async Task Refresh()
    {
        exams = await ExamService.GetExams();
    }

}
