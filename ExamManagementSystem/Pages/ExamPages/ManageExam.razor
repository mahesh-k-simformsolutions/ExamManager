@page "/createexam"
@page "/editexam/{examId:int}"

<PageTitle>@PageTitle</PageTitle>

@using ExamManagementSystem.Data
@using ExamManagementSystem.Enums
@using ExamManagementSystem.Helpers;
@using ExamManagementSystem.Service
@using System.Security.Principal
@using Microsoft.AspNetCore.Identity;
@using ExamManagementSystem.Pages.Component

@inject CommonService Service
@inject ExamService ExamService
@inject NavigationManager UriHelper
@inject AuthenticationStateProvider AuthProvider


@attribute [Authorize(Policy = "VerifiedTeacherOrAdmin")]
@if (Exam == null)
{

}
else
{
    if (IsEditable)
    {
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-12 p-2">
                    <EditForm EditContext="EditContext" OnValidSubmit="@(async (args)=> { await Save(); })">
                        <DataAnnotationsValidator />
                        <RadzenStack>
                            <RadzenStack Orientation=Orientation.Horizontal>
                                <RadzenFormField Text="Exam Name" Style="width:85%">
                                    <ChildContent>
                                        <RadzenTextBox Name="ExamName" Style="width: 100%;" @bind-Value=Exam.ExamName />
                                    </ChildContent>
                                    <Helper><ValidationMessage For="@(() =>Exam.ExamName )" /></Helper>
                                </RadzenFormField>
                                <RadzenFormField Text="Exam Code" Style="width:15%">
                                    <ChildContent>
                                        <RadzenTextBox Disabled="true" Style="width: 100%;" Name="ExamCode" Value=@Exam.ExamCode />
                                    </ChildContent>
                                </RadzenFormField>
                            </RadzenStack>
                            <RadzenStack Orientation=Orientation.Horizontal>
                                <RadzenFormField Text="Start Time" Style="width:25%">
                                    <ChildContent>
                                        <RadzenDatePicker ShowTime="true" TimeOnly="true" HourFormat="12" DateFormat="h:mm tt" Style="width: 100%;" Name="StartTime" @bind-Value=Exam.StartTime />
                                    </ChildContent> <Helper><ValidationMessage For="@(() => Exam.StartTime )" /></Helper>
                                </RadzenFormField>
                                <RadzenFormField Text="End Time" Style="width:25%">
                                    <ChildContent>
                                        <RadzenDatePicker Min="@Exam.StartTime" ShowTime="true" TimeOnly="true" HourFormat="12" DateFormat="h:mm tt" Style="width: 100%;" Name="EndTime" @bind-Value=Exam.EndTime />
                                    </ChildContent> <Helper><ValidationMessage For="@(() => Exam.EndTime )" /></Helper>
                                </RadzenFormField>
                                <RadzenFormField Text="Duration" Style="width:15%">
                                    <ChildContent>
                                        <RadzenTextBox Disabled="true" Style="width: 100%;" Name="Duration" Value=@(Exam.Duration + " Mins") />
                                    </ChildContent>
                                </RadzenFormField>
                                <RadzenFormField Text="Date" Style="width:35%">
                                    <ChildContent>
                                        <RadzenDatePicker Min="DateTime.Now.AddDays(-1)" ShowTime="false" HourFormat="12" Change="@(ar => OnDateTimeChanged(ar))" DateFormat="dd/MM/yyyy" Style="width: 100%;" Name="Date" @bind-Value=Exam.Date />
                                    </ChildContent> <Helper><ValidationMessage For="@(() =>Exam.Date )" /></Helper>
                                </RadzenFormField>
                            </RadzenStack>
                            <RadzenStack Orientation=Orientation.Horizontal>
                                <RadzenDropDown @bind-Value=@SelectedStudents Data=@Students TextProperty="VerifiedName" ValueProperty="Id" Multiple=true AllowClear=true Placeholder="Select student"
                                        AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" SelectAllText="Select all students" DisabledProperty="NotVerified"
                                        SelectedItemsText="selected" Style="width: 75%;" Disabled="@(Exam.Id > 0 && Exam.ExamStatus != EnumExamStatus.NotStarted)" />
                                <RadzenDropDown Data="@(Enum.GetValues(typeof(EnumExamStatus)).Cast<Enum>())" @bind-Value=@Exam.ExamStatus Change="@(ar => OnExamStatusChanged(ar))"
                                        Disabled="@(Exam.Id == 0)" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Style="width: 25%;" />
                            </RadzenStack>
                            <div class="col-md-12 p-2 mb-5 text-center">
                                <RadzenButton ButtonType="ButtonType.Submit" Disabled="!EditContext.Validate()" Text="Save" />
                            </div>
                        </RadzenStack>
                    </EditForm>
                </div>
                <div class="col-md-12 p-2">
                    @if (Exam.Id > 0)
                    {
                        <ManageExamToQuestion Exam="@Exam" />
                    }
                </div>
            </div>
        </div>

    }
    else
    {
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-12 border border-1 p-1 m-3 text-center">
                    Exam is <ExamStatus Exam="@Exam"></ExamStatus>, can't edit
                </div>
            </div>
        </div>
    }

}
@code {

    [Parameter]
    public int examId { get; set; }

    public bool IsEditable { get; set; } = true;

    EditContext? EditContext;
    Exam Exam;
    List<User> Students = new List<User>();
    List<string> SelectedStudents = new List<string>();
    List<string> OriginalSelectedStudents = new List<string>();
    string PageTitle { get => (EditContext != null && EditContext.IsModified() ? "**" : "") + (examId == 0 ? "Conduct" : "Edit") + " Exam - " + Exam?.ExamName; }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (examId == 0)
            {
                this.Exam = new Exam();
                this.Exam.TeacherId = await AuthProvider.GetUserId();
            }
            else
            {
                this.Exam = await ExamService.GetExamById(examId);
                this.IsEditable = Exam.ExamStatus == EnumExamStatus.NotStarted;
                SelectedStudents = this.Exam.ExamToStudents.Select(x => x.StudentId).ToList();
                OriginalSelectedStudents = this.Exam.ExamToStudents.Select(x => x.StudentId).ToList();
            }

            EditContext = new EditContext(Exam);
            Students = await Service.LoadStudents();
        }
        catch (Exception ex)
        {
        }
    }

    private void OnExamStatusChanged(object examStatus)
    {
        if (EnumExamStatus.NotStarted != (EnumExamStatus)examStatus)
        {
            SelectedStudents = OriginalSelectedStudents;
        }
    }

    private void OnDateTimeChanged(DateTime? examDate = null)
    {
        if (examDate.HasValue)
        {
            this.Exam.StartTime = examDate.Value.Date.Add(this.Exam.StartTime.TimeOfDay);
            this.Exam.EndTime = examDate.Value.Date.Add(this.Exam.EndTime.TimeOfDay);
        }
    }

    private async Task Save()
    {
        try
        {
            await ExamService.SaveExam(Exam);
            List<ExamToStudent> examToStudents = new List<ExamToStudent>();
            foreach (var sId in SelectedStudents)
            {
                examToStudents.Add(new ExamToStudent()
                    {
                        ExamId = this.Exam.Id,
                        Exam = Exam,
                        StudentId = sId
                    });
            }
            await ExamService.AssignExamToStudent(examToStudents);
            UriHelper.NavigateTo("/exams");
        }
        catch (Exception ex)
        {
        }
    }
}
