@using ExamManagementSystem.Data
@using ExamManagementSystem.Service
@using ExamManagementSystem
@using ExamManagementSystem.Pages.Component
@using Microsoft.EntityFrameworkCore
@using NuGet.Packaging;
@using static ExamManagementSystem.Pages.Component.AddUpdateQuestion;
@using static ExamManagementSystem.Pages.Component.ImportQuestion;

@inject CommonService Service
@inject ExamService ExamService
@inject QuestionService QuestionService
@inject NavigationManager UriHelper
@inject AuthenticationStateProvider AuthProvider
@inject DialogService DialogService

<div class="p-3 border border-1">
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
        <RadzenText TextStyle="TextStyle.DisplayH5" Text="Questions"></RadzenText>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
            <RadzenButton title="Import questions from other exam" ButtonStyle="ButtonStyle.Primary" Icon="download" class="mt-2 mb-4" Text="Import"
                          Click="@ImportQuestions" Disabled="@(selectedQuestions != null && selectedQuestions.Count > 0)" />
            <RadzenButton ButtonStyle="ButtonStyle.Success" class="mt-2 mb-4" Text="@(selectedQuestions != null && selectedQuestions.Count == 1 ? "Update" : "Add")"
                          Click="@AddUpdateQuestion" Disabled="@(selectedQuestions != null && selectedQuestions.Count > 1)" />
            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" class="mt-2 mb-4" Text="Delete"
                          Click="@(async (args) => { await QuestionService.ExlcudeQuestionFromExam(Exam.Id, new List<int> { selectedQuestions.First().Id }); await LoadGridData(); })"
                          Disabled="@((selectedQuestions != null && selectedQuestions.Count > 1) || selectedQuestions == null || selectedQuestions.Count == 0)" />
        </RadzenStack>
    </RadzenStack>
    <ExamToQuestionsGrid Questions="@Questions" SelectedQuestionsChanged="(args) => { selectedQuestions = args; }" QuestionsGrid="questionsGrid"></ExamToQuestionsGrid>
</div>
@code {
    [Parameter]
    public Exam Exam { get; set; }

    RadzenDataGrid<Question>? questionsGrid;

    List<Question>? Questions;

    public IList<Question>? selectedQuestions { get; set; }

    dynamic? importQuestionDialog;
    dynamic? addUpdateQuestionDialog;

    async Task LoadGridData()
    {
        Questions = await QuestionService.LoadQuestionsByExam(Exam.Id);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadGridData();
    }

    async Task ImportQuestions()
    {
        var args = new ImportQuestionArgs
            {
                exam = Exam,
                callback = new EventCallback(this, () => { CloseDialog(importQuestionDialog); })
            };
        importQuestionDialog = await DialogService.OpenAsync<ImportQuestion>("Import Questions", new Dictionary<string, object>() { { "args", args } }, 
        new DialogOptions()
            {
                Width = "80%",
                CloseDialogOnOverlayClick = true
            });
    }

    public async Task AddUpdateQuestion()
    {
        var data = selectedQuestions != null ? selectedQuestions.FirstOrDefault() : null;
        var args = new AddUpdateQuestionArgs
            {
                Question = data,
                Exam = Exam,
                Callback = new EventCallback(this, () => { CloseDialog(addUpdateQuestionDialog); })
            };
        addUpdateQuestionDialog = await DialogService.OpenAsync<AddUpdateQuestion>((data == null ? "Add" : "Update") + " Question", new Dictionary<string, object>() { { "args", args } },
        new DialogOptions()
            {
                Width = "80%",
                CloseDialogOnOverlayClick = true
            });
    }

    public async Task CloseDialog(dynamic dialog)
    {
        DialogService.Close(dialog);
        await LoadGridData();
    }
}
