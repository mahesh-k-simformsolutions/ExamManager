@page "/questions"

<PageTitle>Questions</PageTitle>

@using ExamManagementSystem.Data
@using System.Security.Claims;
@inject ExamManagementSystem.Service.ExamService ExamService
@inject ExamManagementSystem.Service.QuestionService QService
@inject NavigationManager UriHelper

@inject AuthenticationStateProvider AuthProvider
@attribute [Authorize(Roles = "Teacher,Admin")]

@if (questions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <AuthorizeView Roles="Teacher,Admin">
        <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add" Text="Add Question" Style="margin-bottom:15px;" Click="@(args => UriHelper.NavigateTo("createquestion"))" Size="ButtonSize.ExtraSmall"></RadzenButton>
    </AuthorizeView>

    <div class="container-fluid">
        <div class="row">
            <div class="col-md-7">
                <RadzenDataGrid ColumnWidth="200px" AllowColumnResize="true" AllowColumnReorder="true" AllowPaging="true" PageSize="8" AllowSorting="true" Data="@questions" TItem="Question" @bind-Value="@selectedQ">
                    <Columns>
                        <RadzenDataGridColumn Width="75%" TItem="Question" Title="Question">
                            <Template Context="data">
                                <RadzenText class="mb-0">@data.QuestionText</RadzenText>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Width="25%" TItem="Question" Title="Action">
                            <Template Context="data">
                                <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Click=@(args => UriHelper.NavigateTo("editquestion/" + @data.Id))
                                          Text="Edit" Size="ButtonSize.ExtraSmall"></RadzenButton>
                                <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Click=@(args => DeleteQ(@data.Id))
                                          Text="Delete" Size="ButtonSize.ExtraSmall"></RadzenButton>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </div>
            @if (questions.Count > 0)
            {
                <div class="col-md-5">
                    <RadzenCard Style="margin-bottom:20px">
                        <b>@selectedQ.FirstOrDefault()?.QuestionText</b>
                    </RadzenCard>
                    <RadzenTabs>
                        <Tabs>
                            <RadzenTabsItem Text="Options">
                                <ol>
                                    @{
                                        var options = selectedQ?.FirstOrDefault()?.Options;
                                    }
                                    @if (selectedQ?.Count > 0 && options != null)
                                    {
                                        @foreach (var item in options)
                                        {
                                            <li> <RadzenText Style="margin-bottom:5px"> <b>@item.OptText</b></RadzenText> </li>
                                        }
                                    }
                                </ol>
                            </RadzenTabsItem>
                            <RadzenTabsItem Text="Details">
                                <RadzenDataGrid Data="@selectedQ" TItem="Question">
                                    <Columns>
                                        <RadzenDataGridColumn TItem="Question" Title="Mark(s)">
                                            <Template Context="data">
                                                <RadzenText class="mb-0">@data.Marks</RadzenText>
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="Question" Title="Appeared in Exams">
                                            <Template Context="data">
                                                <RadzenText class="mb-0">@data.Exams.Count</RadzenText>
                                            </Template>
                                        </RadzenDataGridColumn>
                                    </Columns>
                                </RadzenDataGrid>
                            </RadzenTabsItem>
                        </Tabs>
                    </RadzenTabs>
                </div>
            }
        </div>
    </div>
}

@code {
    private List<Question> questions = new List<Question>();
    private IList<Question> selectedQ = new List<Question>();
    private ClaimsPrincipal? User;
    protected override async Task OnInitializedAsync()
    {
        var authstate = await AuthProvider.GetAuthenticationStateAsync();
        User = authstate.User;
        await Refresh();
    }
    private async Task DeleteQ(int id)
    {
        await QService.DeleteQ(id);
        await Refresh();
    }

    private async Task Refresh()
    {
        questions = await QService.GetQuestions();
        selectedQ = new List<Question>() { questions.FirstOrDefault() };
    }
}

@code {

}
