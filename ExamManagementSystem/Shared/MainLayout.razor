@inherits LayoutComponentBase
@using ExamManagementSystem.Data;
@using ExamManagementSystem.Hubs;
@using Microsoft.AspNetCore.SignalR.Client;
@using ExamManagementSystem.Hubs.Connection;
@using ExamManagementSystem.Enums;

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NotificationService NotificationService
@inject AlertService AlertService
@inject SignalRBlazorHubConnection Connection
@inject NavigationManager UriHelper
@inject IJSRuntime JsRuntime
@inject DataStore DataStore
<PageTitle>ExamManagementSystem</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4 auth bg-light">
            <LoginDisplay />
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
        </div>
        <ExamManagementSystem.Pages.RadzenCustom.Alert.RadzenAlertCustom />
        <article class="content">
            @Body
        </article>
    </main>
</div>
<RadzenDialog />
<RadzenNotification />
<RadzenContextMenu />
<RadzenTooltip />
@code {
    private HubConnection _hubConnection;
    private async void OnUserLoginStateChanged(Task<AuthenticationState> task)
    {
        await RegisterSignalRMethods(task);
    }
    protected override async Task OnInitializedAsync()
    {
        var authState = AuthenticationStateProvider.GetAuthenticationStateAsync();
        await RegisterSignalRMethods(authState);
        AuthenticationStateProvider.AuthenticationStateChanged += OnUserLoginStateChanged;
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnUserLoginStateChanged;
    }

    public async Task RegisterSignalRMethods(Task<AuthenticationState> task)
    {
        var authState = await task;
        if (authState.User.Identity != null && authState.User.Identity.IsAuthenticated)
        {
            await Connection.Initialize();

            _hubConnection = Connection.HubConnection;

            _hubConnection.On<Exam>("NotifyExamStatus", (exam) =>
                   {
                       AlertStyle style = AlertStyle.Info;
                       string message = $"Exam - {exam.ExamName} ({exam.ExamCode}) has been {exam.ExamStatus.ToString().ToLower()}";
                       switch (exam.ExamStatus)
                       {
                           case EnumExamStatus.Started:
                               style = AlertStyle.Info;
                               break;
                           case EnumExamStatus.Completed:
                               style = AlertStyle.Success;
                               break;
                           case EnumExamStatus.Cancelled:
                               style = AlertStyle.Danger;
                               break;
                           case EnumExamStatus.NotStarted:
                               message = $"You have new Exam - {exam.ExamName} ({exam.ExamCode}) on {exam.Date.ToString("D")} - {exam.StartTime.ToString("hh:mm tt")})";
                               break;
                       }

                       AlertService.Alert(new RadzenAlert() { Text = message, AlertStyle = style });

                       DataStore.OnDataChanged();
                       InvokeAsync(() =>
                       {
                           StateHasChanged();
                       });
                   });
        }
    }
    public class Alert
    {
        public string Text { get; set; }
        public AlertStyle AlertStyle { get; set; }
    }
}
